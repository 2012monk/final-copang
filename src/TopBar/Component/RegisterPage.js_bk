import React, { useState } from "react";
import { Formik } from 'formik';
import { Link } from 'react-router-dom';
import * as Yup from 'yup';
import { registerUser } from "../../_actions/user_actions";
import { useDispatch } from "react-redux";
import { makeStyles, Box, Input, Button, FormControl, Avatar, Container, CssBaseline, Typography, Grid, TextField } from '@material-ui/core';
import { LockOutlinedIcon } from '@material-ui/icons/LockOutlined';


function RegisterPage(props) {
  const dispatch = useDispatch();
  const [Username, setUsername] = useState("");
  const [Password, setPassword] = useState("");
  const [ConfirmPasword, setConfirmPasword] = useState("");
  const [Mobile, setMobile] = useState("");
  const [RealName, setRealName] = useState("");
  const [Description, setDescription] = useState("");

  const onEmailHandler = (e) => {
    setUsername(e.currentTarget.value);
  };


  const onPasswordHanlder = (e) => {
    setPassword(e.currentTarget.value);
  };

  const onConfirmPasswordHandler = (e) => {
    setConfirmPasword(e.currentTarget.value);
  };
  const onMobileHandler = (e) => {
    setMobile(e.currentTarget.value);
  }
  const onRealNameHandler = (e) => {
    setRealName(e.currentTarget.value);
  }
  const onDescriptionHandler = (e) => {
    setDescription(e.currentTarget.value);
  }
  return (
    <div
      style={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        height: "100vh",
      }}>
      <form
        onSubmit = {(values, { setSubmitting }) => {
          this.preventDefault();
          setTimeout(() => {
      
            let dataToSubmit = {
              username: Username,
              password: Password,
              mobile: Mobile,
              realName: RealName,
              description: Description
              // username: values.username,
              // password: values.password,
              // mobile: values.mobile,
              // realName: values.realName,
              // description: values.description
            };
      
            dispatch(registerUser(dataToSubmit)).then(response => {
              if (response.payload.message==='created') {
                props.history.push("/login");
              } else {
                alert(response.payload.err.errmsg)
              }
            })
            setSubmitting(false);
          }, 500);
        }}
        style={{ display: "flex", flexDirection: "column" }}>
        <label>Username</label>
        <input type="text" value={Username} onChange={onEmailHandler} />
        <label>비밀번호</label>
        <input type="password" value={Password} onChange={onPasswordHanlder} />
        <label>비밀번호 확인</label>
        <input
          type="password"
          value={ConfirmPasword}
          onChange={onConfirmPasswordHandler}
        />
        <label>휴대폰번호</label>
        <input type="test" value={Mobile} onChange={onMobileHandler} />
        <label>realName</label>
        <input type="test" value={RealName} onChange={onRealNameHandler} />
        <br />
        <button type="submit">회원 가입</button>
      </form>
    </div>

  );
}

  // return (

  //   <Formik style={{align:'center'}}
  //     initialValues={{
  //       username: '',
  //       password: '',
  //       mobile: '',
  //       realName: '',
  //       description: ''
  //     }}
  //     validationSchema={Yup.object().shape({
  //       username: Yup.string()
  //         .required('Name is required'),
  //       password: Yup.string()
  //         .min(6, 'Password must be at least 6 characters')
  //         .required('Password is required'),
  //       mobile: Yup.string()
  //         .required('휴대폰번호를 입력하세요')

  //     })}
  //     onSubmit={(values, { setSubmitting }) => {
  //       setTimeout(() => {

  //         let dataToSubmit = {
  //           username: values.username,
  //           password: values.password,
  //           mobile: values.mobile,
  //           realName: values.realName,
  //           description: values.description
  //         };

  //         dispatch(registerUser(dataToSubmit)).then(response => {
  //           if (response.payload.success) {
  //             props.history.push("/login");
  //           } else {
  //             alert(response.payload.err.errmsg)
  //           }
  //         })

  //         setSubmitting(false);
  //       }, 500);
  //     }}
  //   >
  //     {props => {
  //       const {
  //         values,
  //         touched,
  //         errors,
  //         dirty,
  //         isSubmitting,
  //         handleChange,
  //         handleBlur,
  //         handleSubmit,
  //         handleReset,
  //       } = props;
  //       return (
  //         <div className="app">
  //           <h2>Sign up</h2>
  //           <form style={{ minWidth: '375px', width:'30%' }} {...formItemLayout} onSubmit={handleSubmit} >

  //             <div required label="Name">
  //               <Input
  //                 id="username"
  //                 placeholder="Username"
  //                 type="text"
  //                 value={values.username}
  //                 onChange={handleChange}
  //                 onBlur={handleBlur}
  //                 className={
  //                   errors.name && touched.name ? 'text-input error' : 'text-input'
  //                 }
  //               />
  //               {errors.name && touched.name && (
  //                 <div className="input-feedback">{errors.name}</div>
  //               )}
  //             </div>

  //             <div required label="mobile">
  //               <Input
  //                 id="mobile"
  //                 placeholder="cell phone"
  //                 type="text"
  //                 value={values.mobile}
  //                 onChange={handleChange}
  //                 onBlur={handleBlur}
  //                 className={
  //                   errors.lastName && touched.lastName ? 'text-input error' : 'text-input'
  //                 }
  //               />
  //               {errors.lastName && touched.lastName && (
  //                 <div className="input-feedback">{errors.lastName}</div>
  //               )}
  //             </div>

  //             <div required label="" hasFeedback validateStatus={errors.email && touched.email ? "error" : 'success'}>
  //               <Input
  //                 id="username"
  //                 placeholder="Username"
  //                 type="text"
  //                 value={values.username}
  //                 onChange={handleChange}
  //                 onBlur={handleBlur}
  //                 className={
  //                   errors.username && touched.username ? 'text-input error' : 'text-input'
  //                 }
  //               />
  //               {errors.username && touched.username && (
  //                 <div className="input-feedback">{errors.username}</div>
  //               )}
  //             </div>

  //             <div required label="Password" hasFeedback validateStatus={errors.password && touched.password ? "error" : 'success'}>
  //               <Input
  //                 id="password"
  //                 placeholder="Enter your password"
  //                 type="password"
  //                 value={values.password}
  //                 onChange={handleChange}
  //                 onBlur={handleBlur}
  //                 className={
  //                   errors.password && touched.password ? 'text-input error' : 'text-input'
  //                 }
  //               />
  //               {errors.password && touched.password && (
  //                 <div className="input-feedback">{errors.password}</div>
  //               )}
  //             </div>

  //             <div required label="Confirm" hasFeedback>
  //               <Input
  //                 id="confirmPassword"
  //                 placeholder="Enter your confirmPassword"
  //                 type="password"
  //                 value={values.confirmPassword}
  //                 onChange={handleChange}
  //                 onBlur={handleBlur}
  //                 className={
  //                   errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'
  //                 }
  //               />
  //               {errors.confirmPassword && touched.confirmPassword && (
  //                 <div className="input-feedback">{errors.confirmPassword}</div>
  //               )}
  //             </div>

  //             <div {...tailFormItemLayout}>
  //               <Button onClick={handleSubmit} type="primary" disabled={isSubmitting}>
  //                 Submit
  //               </Button>
  //             </div>
  //           </form>
  //         </div>
  //       );
  //     }}
  //   </Formik>
  // );
// };


export default RegisterPage
